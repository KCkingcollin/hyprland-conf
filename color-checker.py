#!/usr/bin/env python3

import hashlib
import time
import os
import subprocess
import signal

# Function to calculate the md5 hash of a file
def md5sum(filepath):
    with open(filepath, 'rb') as f:
        return hashlib.md5(f.read()).hexdigest()

# Function to convert RGB values to hex
def rgb2hex(r, g, b):
    return '{:02x}{:02x}{:02x}'.format(r, g, b)

# Function to format RGB values for CSS
def num2css(r, g, b):
    return f'{r}, {g}, {b}'

# Function to replace a line in a file
def replace_line_in_file(filepath, search_term, new_line):
    with open(filepath, 'r') as file:
        lines = file.readlines()
    with open(filepath, 'w') as file:
        for line in lines:
            if search_term in line:
                file.write(new_line + '\n')
            else:
                file.write(line)
def reload_kitty_config():
    try:
        # Get all PIDs of running kitty processes
        kitty_pids = subprocess.check_output(['pgrep', '-f', 'kitty']).decode().strip().split('\n')
        
        if kitty_pids:
            # Iterate over each PID and send the signal
            for pid in kitty_pids:
                os.kill(int(pid), signal.SIGUSR1)
            print("Reloaded kitty configuration for all instances.")
        else:
            print("kitty is not running.")
    except subprocess.CalledProcessError:
        print("kitty is not running.")

# Main loop to check for changes and update colors
def main():
    home = os.path.expanduser("~")
    color_file = os.path.join(home, ".config/castle-shell/accent-color")
    hypr_conf_file = os.path.join(home, ".config/castle-shell/hypr-colors.conf")
    kitty_conf_file = os.path.join(home, ".config/castle-shell/kitty-colors.conf")
    css_file = os.path.join(home, ".config/castle-shell/colors.css")
    rasi_file = os.path.join(home, ".config/castle-shell/colors.rasi")

    current_hash = md5sum(color_file)

    while True:
        time.sleep(0.25)
        new_hash = md5sum(color_file)
        if new_hash == current_hash:
            continue
        current_hash = new_hash

        # Read the RGB values from the color file
        with open(color_file, 'r') as f:
            lines = f.readlines()
        out_prime = list(map(int, lines[0].strip().split()))
        out_alt = list(map(int, lines[1].strip().split()))

        # Convert RGB values to hex and CSS formats
        hex_prime = rgb2hex(*out_prime)
        hex_alt = rgb2hex(*out_alt)
        css_prime = num2css(*out_prime)
        css_alt = num2css(*out_alt)
        hex_text = 'ffffff'
        css_text = '255, 255, 255'

        print(f'Converted colors - Hex Prime: {hex_prime}, Hex Alt: {hex_alt}')
        print(f'CSS Prime: {css_prime}, CSS Alt: {css_alt}')

        # Generate Hyprland hypr-colors.conf file
        hypr_content = f"""# color vars generated by theme-checker.service from ~/.config/castle-shell/accent-color
$prime_color = rgba({hex_prime}a6)
$alt_color = rgba({hex_alt}8c)
"""
        with open(hypr_conf_file, 'w') as f:
            f.write(hypr_content)

        # Generate Kitty kitty-colors.conf file
        kitty_content = f"""# color vars generated by theme-checker.service from ~/.config/castle-shell/accent-color
foreground #{hex_text}
background #{hex_alt}
background_opacity 0.35
"""
        with open(kitty_conf_file, 'w') as f:
            f.write(kitty_content)

        reload_kitty_config()

        # Generate CSS file
        css_content = f"""/*color vars generated by theme-checker.service from ~/.config/castle-shell/accent-color*/
@define-color primaryColor rgba({css_prime}, 0.5);
@define-color secondaryColor rgba({css_alt}, 0.35);
@define-color secondaryColorDark rgba({css_alt}, 0.45);
@define-color secondaryColorDarker rgba({css_alt}, 0.6);
@define-color textColor rgba({css_text}, 1);
"""
        with open(css_file, 'w') as f:
            f.write(css_content)

        # Generate Rasi file
        rasi_content = f"""/*color vars generated by theme-checker.service from ~/.config/castle-shell/accent-color*/
* {{
    primaryColor: rgba({css_prime}, 0.5);
    secondaryColor: rgba({css_alt}, 0.35);
    secondaryColorDark: rgba({css_alt}, 0.45);
    secondaryColorDarker: rgba({css_alt}, 0.6);
    textColor: rgba({css_text}, 1);
}}
"""
        with open(rasi_file, 'w') as f:
            f.write(rasi_content)

        # Restart services
        subprocess.run(["systemctl", "restart", "--user", "waybar-hyprland.service"])
        subprocess.run(["systemctl", "restart", "--user", "swaync.service"])

        # Print updated colors for debugging
        print(f'Primary CSS Color: rgba({css_prime}, 0.5)')
        print(f'Secondary CSS Color: rgba({css_alt}, 0.35)')
        print(f'Dark Secondary CSS Color: rgba({css_alt}, 0.45)')
        print(f'Darker Secondary CSS Color: rgba({css_alt}, 0.6)')
        print(f'Hyprland Primary Color: rgba({hex_prime}a6)')
        print(f'Hyprland Secondary Color: rgba({hex_alt}8c)')

if __name__ == "__main__":
    main()

